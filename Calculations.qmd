---
title: Calculations, In-Depth
author: Eric Mossotti
---

## Contig Length (bp)

```{python}
#| eval: false
 
import numpy as np
from itertools import groupby

#---- fasta_iter()
def fasta_iter(fasta_file):
    
    fh = open(fasta_file)
    
    fa_iter = (x[1] for x in groupby(fh, lambda line: line[0] == ">"))
    
    for header in fa_iter:
        
        # drop the ">"
        header = next(header)[1:].strip()
        
        # join all sequence lines to one
        seq = "".join(s.upper().strip() for s in next(fa_iter))
        
        yield header, seq

#---- read_genome
def read_genome(fasta_file):

  #  gc = 0
    total_len = 0
    
    contig_lens = []
    scaffold_lens = []
    
    for _, seq in fasta_iter(fasta_file):
        
        scaffold_lens.append(len(seq))
        
        if "NN" in seq:
            
            contig_list = seq.split("NN")
            
        else:
            
            contig_list = [seq]
            
        for contig in contig_list:
            
            if len(contig):
                
               # gc += contig.count('G') + contig.count('C')
                
                total_len += len(contig)
                
                contig_lens.append(len(contig))
                
    #gc_cont = (gc / total_len) * 100
    
    #return contig_lens, scaffold_lens, gc_cont
    return contig_lens, scaffold_lens

#---- calculate_stats()
#def calculate_stats(seq_lens, gc_cont):
def calculate_stats(seq_lens):
    
    stats = {}
    
    seq_array = np.array(seq_lens)
    
    stats['sequence_count'] = seq_array.size
    
   # stats['gc_content'] = gc_cont
    
    sorted_lens = seq_array[np.argsort(-seq_array)]
    
    stats['longest'] = int(sorted_lens[0])
    
   # stats['shortest'] = int(sorted_lens[-1])
    
 #   stats['median'] = np.median(sorted_lens)
    
 #   stats['mean'] = np.mean(sorted_lens)
    
    stats['total_bps'] = int(np.sum(sorted_lens))
    
    csum = np.cumsum(sorted_lens)
    
    #for level in [10, 20, 30, 40, 50]:
    for level in [50]:
        
        nx = int(stats['total_bps'] * (level / 100))
        
        csumn = min(csum[csum >= nx])
        
        l_level = int(np.where(csum == csumn)[0])
        
        n_level = int(sorted_lens[l_level])

        #stats['L' + str(level)] = l_level
        
        stats['N' + str(level)] = n_level
        
    return stats

#infilename = sys.argv[1]
infilename = "01_Transform/data/magicicada.fasta"

#contig_lens, scaffold_lens, gc_cont = read_genome(infilename)
contig_lens, scaffold_lens = read_genome(infilename)

#contig_stats = calculate_stats(contig_lens, gc_cont)
contig_stats = calculate_stats(contig_lens)

#scaffold_stats = calculate_stats(scaffold_lens, gc_cont)
scaffold_stats = calculate_stats(scaffold_lens)

stat_output = {'Contig Stats': contig_stats,
               'Scaffold Stats': scaffold_stats}

stat_output["Contig Stats"]["sequence_count"]
```

## Number of Contigs

```{r}



```

## Contig N50 (bp)

```{r}

```

## Longest Contig (bp)

```{r}

```

## Scaffold Length (bp)

```{r}

```

## Number of Scaffolds

```{r}

```

## Scaffold N50 (bp)

```{r}

```

## Longest Scaffold (bp)

```{r}

```
