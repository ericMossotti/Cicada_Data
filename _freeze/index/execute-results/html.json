{
  "hash": "a78d5893d0a98128fb19a1da535ade0b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Cicada Data\"\nsubtitle: \"Data analysis reproduction concerning the cicada's genome.\"\n\nauthor: \n    - name: \"Eric Mossotti\"\n      corresponding: true\n      email: ecmossotti@gmail.com\n      roles:\n        - Data analysis\n        - Project management\n\nkeywords: \n    - Genomics\n    - Data Analysis\n    - Data Engineering\n\ndate: 07/06/2024\ndate-modified: last-modified\ndate-format: \"MMM D, YYYY\"\n\nbibliography: references.bib\n\nrepo: https://github.com/ericMossotti/genomics\nsource: genomics.qmd\n\nabstract-title: \"Objective\"\nabstract: |\n      To reproduce DNA Zoo's summary table on the 17-year cicada.\n      \ndescription-meta: \"Reproducible genomics analysis.\"\n\nlicense: CC BY-SA\nfunding: \"The author(s) received no specific funding for this work.\"\n\ncsl: csl/apa.csl\ncitation-location: margin\ncitations-hover: true\nlink-citations: true\nciteproc: true\n\ntoc-expand: true\ntoc: true\nnumber-sections: true\n\nlink-external-newwindow: true\nsmooth-scroll: true\nfig-responsive: true\necho: true\ncallout-appearance: simple\ncode-fold: show\ncode-overflow: wrap\n\nfilters:\n     - nutshell\n---\n\n\n\n## Introduction {.unnumbered}\n\n### Problem {.unnumbered}\n\nThe steps involved in reproducing data can be unclear.\n\n### Purpose {.unnumbered}\n\nTo elaborate on the objective stated at the top of this document, the purpose is to supplement the DNA Zoo's report with a more easily accessible data analysis (DA) pipeline. To accomplish this, I seek to independently reproduce and supplement their article's table while supplying all data processing steps with documented code embedded in the report itself. Although there's nothing wrong with the data or article, it could be taken further. [@dnazoo], [@magicica]\n\n### Stakeholders {.unnumbered}\n\nThis might be of interest to the original authors of the article. More generally, the spirit of this work could transfer to other domains of data intensive research and analytics.\n\n### Source {.unnumbered}\n\nAll data used within this report was freely available from a public database hosted by DNA Zoo. [@dnazoo.s]\n\n## Pipeline {.unnumbered}\n\n\n\n```{mermaid}\n%%| code-fold: true\n%%| code-summary: Create a Mermaid diagram from code.\n\nflowchart TB\n    A((1)):::circle --> B((2)):::circle\n    B --> C((3)):::circle\n    C --> D((4)):::circle\n    \n    subgraph Extract [\"1. Extract\"]\n        direction LR\n        A1[\"Create local\\nanalysis directory\"] --> A2[\"Download from web\\nto local directory\"]\n    end\n    subgraph Transform [\"2. Transform\"]\n        direction LR\n        B1[\"Decompress\\nfasta.gz file\"] --> B2[\"Output text file\\nusing bash script\"]\n        B2 --> B3[\"Transform text to\\nindexed dataframe\"]\n    end\n    subgraph Load [\"3. Load\"]\n        direction LR\n        C1[\"Format table values\\nwith thousands-separator\"]\n    end\n    subgraph Present [\"4. Present\"]\n        direction LR\n        D1[\"Create a Styler object\\nfrom the dataframe\"] --> D2[\"Dataframe is accessible\\nfrom the Styler object\"]\n        D2 --> D3[\"Reproduce DNA Zoo table\\nusing Python to R conversion\"]\n    end\n\t\n    A ~~~ Extract\n    B ~~~ Transform\n    C ~~~ Load\n    D ~~~ Present\n\t\n    Extract -.->|fasta.gz| Transform\n    Transform -.->|pd.DataFrame| Load\n    Load -.->|string variables| Present\n\n```\n\n\n\n## Extract\n\nThis would be the data extraction phase of the DA pipeline.\n\n### Create Project Directory\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden  code-summary=\"Source the external `directorize.py` script.\"}\nreticulate::source_python(\"00_Extract/scripts/directorize.py\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code .hidden  code-summary=\"This creates the project's analysis directory.\"}\nimport os\n\ndef directorize(base_path, structure):\n    \n    for dir_name, subdirs in structure.items():\n        dir_path = os.path.join(base_path, dir_name)\n        os.makedirs(dir_path, exist_ok = True)\n        \n        for subdir in subdirs:\n            subdir_path = os.path.join(dir_path, subdir)\n            os.makedirs(subdir_path, exist_ok = True)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code .hidden  code-summary=\"If the directory folders already exist, it shouldn't cause any issues to allow this code to evaluate during render.\"}\n# Define the directory structure\nstructure = {\n    \"00_Extract/\": [\"data/\", \"scripts/\"],\n    \"01_Transform/\": [\"data/\", \"scripts/\"],\n    \"02_Load/\": [\"data/\", \"scripts/\"],\n    \"03_Present/\": [\"data/\", \"scripts/\"]\n}\n\n# Create the analysis folder structure in a preferred base directory\n# \"\" = project's working directory\ndirectorize(\"\", structure)\n```\n:::\n\n\n\n### Download to Local Machine\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden  code-summary=\"Source the `importer.py` script.\"}\nreticulate::source_python(\n    \"00_Extract/scripts/importer.py\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code .hidden  code-summary=\"This checks for and downloads the data.\"}\n# ---- Import data from the web with wget\nimport os\nimport sys\nimport wget\n\ndef importer (fileMap):\n    # Download from URL to path and notify when complete\n    for url, file_path in fileMap.items():\n        # Checking file existence\n        if not os.path.exists(file_path):\n            wget.download(url, file_path)\n            print(f\"{file_path} written\")\n        else:\n            print(f\"{file_path} already exists.\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code .hidden  code-summary=\"Run `importer()`, passing in the mapped URL to the local directory path destination.\"}\n# Set the url\nurl = \"https://dnazoo.s3.wasabisys.com/Magicicada_septendecula/magicicada_hifiasm.asm.bp.p_ctg_HiC.fasta.gz\"\n\n# Set the local file path\nfpath = \"00_Extract/data/magicicada.fasta.gz\"\n\n# Map the url to the file path\nfileMap = {url: fpath}\n\nimporter(fileMap)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n00_Extract/data/magicicada.fasta.gz already exists.\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\n### The specific link used to download all data from\n\n<https://dnazoo.s3.wasabisys.com/Magicicada_septendecula/magicicada_hifiasm.asm.bp.p_ctg_HiC.fasta.gz>\n:::\n\n## Transform\n\nThe data transformation phase of the pipeline.\n\n### Decompress .GZ\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden  code-summary=\"Source the `decompress.py` script.\"}\nreticulate::source_python(\"01_Transform/scripts/decompress.py\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code .hidden  code-summary=\"This transforms the compressed file to its decompressed form.\"}\n# ---- Decompress the gz file with gzip\n\nimport os\nimport gzip\nimport shutil\n\ndef decompress(gzFasta, fasta):\n    \n    # If not decompressed, then decompress and redirect to a new file path\n    if not os.path.exists(fasta):\n        # File doesn't exist, then decompress\n        with gzip.open(gzFasta, 'rb') as f_in:\n            with open(fasta, 'wb') as f_out:\n                shutil.copyfileobj(f_in, f_out)\n        print(f\"{fasta} has been decompressed and written.\")\n    else:\n        print(f\"The file {fasta} already exists. Skipping unzip.\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code .hidden  code-summary=\"Run `decompress()`, using the compressed path and the desired path to the decompressed file.\"}\n# Set the compressed fasta.gz file variable\ngzFasta = \"00_Extract/data/magicicada.fasta.gz\"\n\n# Set the decompressed fasta file variable\nfasta = \"01_Transform/data/magicicada.fasta\"\n\n# Pass file paths to the function\ndecompress(gzFasta, fasta)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nThe file 01_Transform/data/magicicada.fasta already exists. Skipping unzip.\n```\n\n\n:::\n:::\n\n\n\nThis chunk should be ran locally instead of with `quarto render`. When working with the source file, change the code-chunk language specifier from `{.bash}` back to `{bash}`. You might have to add the `{bash}` tag entirely to the div. Not sure how else to go about accomplishing this within my current Quarto project setup. [@trizna2020]\n\n``` bash\n# BASH SCRIPT\n\n# The uncompressed fasta file variable\nfasta=01_Transform/data/magicicada.fasta\n\n# The text file path variable generated by the script\nsummary_stats=01_Transform/data/summary_stats.txt\n\nassembly_stats $fasta > $summary_stats\n```\n\nTransform the text file into a Python dataframe. I am opting to not to blanket change data-types as output format could vary by user preference.\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden  code-summary=\"Source the `assemblyFramer.py` script.\"}\n# Import  external python script to local library environment\nreticulate::source_python(\"01_Transform/scripts/assemblyFramer.py\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code .hidden  code-summary=\"This code transforms text file data into a mult-indexed dataframe. Multi-indexing simplifies query syntax later on.\"}\n\"\"\" Utilizes Python string methods and multi-indexing \nto process assembly_stats' output text file \"\"\"\n\nimport pandas as pd\nimport re\n\ndef assemblyFramer(statsPath = None):\n    \n    #---- Read Text File\n    with open(statsPath, 'r') as file:\n        content = file.read()\n        \n    #---- Regex Matching\n    pairs = re.findall(r\"\\\"\\w+\\\"\\:\\s\\d*\\.?\\d*\", content)\n    \n    #---- Clean Strings\n    cleaned_list = [pair.replace('\"', '').replace(':', '').strip() for pair in pairs]\n    \n    #---- Split Strings\n    labeled_list = [item.split() for item in cleaned_list]\n    \n    #---- Create DataFrame\n    df = pd.DataFrame(labeled_list, columns = ['Label', 'Value'])\n    \n    #---- Add Category Column\n    df['Category'] = ['Contigs'] * 17 + ['Scaffolds'] * 17\n    \n    #---- Create Arrays\n    category_array = pd.Series.to_list(df['Category'])\n    label_array = pd.Series.to_list(df['Label'])\n    value_array = pd.Series.to_list(df['Value'])\n    \n    #---- Combine Arrays to List\n    arrayList = [category_array, label_array]\n    \n    #---- Define Multi-Level Indices\n    indices = pd.MultiIndex.from_arrays(arrays = arrayList, names = ('Category', 'Label'))\n    \n    #---- Index a DataFrame \n    df_indexed = pd.DataFrame(data = value_array, index = indices)\n    \n    #---- Rename Non-Indexed Column\n    df_indexed = df_indexed.rename(columns = {0:\"Value\"})\n    \n    return df_indexed\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code .hidden  code-summary=\"Run `assemblyFramer()`, passing in the path to the text file generated by running the Bash script from earlier.\"}\n# Set the local text file path\nstatsPath = \"01_Transform/data/summary_stats.txt\"\n# Run to yield an multi-indexed dataframe\ndf = assemblyFramer(statsPath)\n```\n:::\n\n\n\n## Load\n\nThis is the data loading phase. Following completion of this stage, querying the data should be more intuitive than before.\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden  code-summary=\"Source the `strint.py` script.\"}\nreticulate::source_python(\"02_Load/scripts/strint.py\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code .hidden  code-summary=\"This code transforms the strings in the value column of the dataframe to a more visually appealing, thousands-separated form.\"}\n\"\"\" Formats the string representation of an \ninteger value as a comma separated string. \"\"\"\n\nimport pandas as pd\nimport re\n\n\n# Format output with comma seperator for thousands place\ndef strint (dataframe, category, label):\n    \n    # Find the desired value\n    stat = dataframe.loc[(category, label), \"Value\"]\n    \n    # Set boolean match value\n    isFloat = re.search(r\"\\.\", stat)\n    \n    # Convert to float if there is a decimal\n    if isFloat:\n        stat = pd.to_numeric(stat, downcast = \"float\")\n    else:\n        # Else convert to an integer \n        stat = pd.to_numeric(stat, downcast = \"integer\")\n        \n    # Add a thousands seperator and convert back to a string\n    stat = f'{stat:,}'\n    \n    return stat \n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code .hidden  code-summary=\"Calls `strint()`, with the simpflified query syntax noted earlier. One can simply specify the literal 'Category' and 'Label' keys to return the desired value.\"}\n#---- Contigs\nctig_len = strint(df, \"Contigs\", \"total_bps\")\nctig_count = strint(df, \"Contigs\", \"sequence_count\")\nctig_n50 = strint(df, \"Contigs\", \"N50\")\nctig_max = strint(df, \"Contigs\", \"longest\")\n\n#---- Scaffolds\nsfld_len = strint(df, \"Scaffolds\", \"total_bps\")\nsfld_count = strint(df, \"Scaffolds\", \"sequence_count\")\nsfld_n50 = strint(df, \"Scaffolds\", \"N50\")\nsfld_max = strint(df, \"Scaffolds\", \"longest\")\n```\n:::\n\n\n\n::: {.callout-tip appearance=\"simple\"}\n### Python query syntax made easier\n\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"false\" code-summary=\"An example of the syntax used to query the multi-indexed dataframe. This code is not evaluated, but for illustrative purposes.\"}\n# strint(dataframe, category, label)\nctig_len = strint(df, \"Contigs\", \"N50\")\n\n# --->> \n\n# Which then finds the desired value or 'Value'\nstat = dataframe.loc[(category, label), \"Value\"]\n```\n:::\n\n\n:::\n\n## Present\n\n### The Pandas Table\n\nThis is a slightly formatted view of the Pandas table designed to be more easily queried to return the desired statistic. If, however, you'd like to treat the Styler object as the unchanged, dataframe object, use the `forma_df.data` syntax.\n\n::: d-flex\n[[:The original dataframe output:](#NutFrame)]{}\n:::\n\n::: column-page-outset\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden  code-summary=\"Source the `formaFrame.py` script.\"}\nreticulate::source_python(\"03_Present/scripts/formaFrame.py\")\n```\n:::\n\n\n\n::: {#forma}\n\n\n::: {.cell}\n\n```{.python .cell-code .hidden  code-summary=\"Call `formaFrame()`, passing in 2 distinct color dictionaries corresponding to index level.\"}\n#---- Count Colors\n# Create color palettes for first level index and second level index + columns.\nn_colors1 = len(df.index.levels[0])\nn_colors2 = len(df.index.levels[1]) + len(df.columns)\n\n#---- Palettes\n# Adjust color palettes easily\npalette1 = sns.color_palette(\"Pastel2\", n_colors = n_colors1)\npalette2 = sns.color_palette(\"husl\", n_colors = n_colors2)\n\n#---- Palette-Index Dictionaries\n# Map index levels and column names to colors with dictionaries\ncolor_dict1 = dict(zip(df.index.levels[0], palette1))\n# For index level 2 and value columns, using a different palette\ncolor_dict2 = dict(zip(list(\n    df.index.levels[1]) + list(df.columns), palette2))\n\n#---- Call Function\nforma_df = formaFrame(df, color_dict1, color_dict2)\n\n#---- Hide Headers\n# The columns headers look a bit odd for display purposes\nforma_df = forma_df.hide(axis = \"index\", names = True)\nforma_df = forma_df.hide(axis = \"columns\", level = 0)\n\n#---- Display \nforma_df\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<style type=\"text/css\">\n#T_440a4_row0_col0, #T_440a4_row17_col0 {\n  background-color: rgba(246, 112, 136, 0.2);\n}\n#T_440a4_row1_col0, #T_440a4_row18_col0 {\n  background-color: rgba(247, 117, 67, 0.2);\n}\n#T_440a4_row2_col0, #T_440a4_row19_col0 {\n  background-color: rgba(213, 140, 49, 0.2);\n}\n#T_440a4_row3_col0, #T_440a4_row20_col0 {\n  background-color: rgba(187, 151, 49, 0.2);\n}\n#T_440a4_row4_col0, #T_440a4_row21_col0 {\n  background-color: rgba(163, 159, 49, 0.2);\n}\n#T_440a4_row5_col0, #T_440a4_row22_col0 {\n  background-color: rgba(135, 167, 49, 0.2);\n}\n#T_440a4_row6_col0, #T_440a4_row23_col0 {\n  background-color: rgba(79, 176, 49, 0.2);\n}\n#T_440a4_row7_col0, #T_440a4_row24_col0 {\n  background-color: rgba(50, 176, 114, 0.2);\n}\n#T_440a4_row8_col0, #T_440a4_row25_col0 {\n  background-color: rgba(52, 174, 144, 0.2);\n}\n#T_440a4_row9_col0, #T_440a4_row26_col0 {\n  background-color: rgba(53, 172, 164, 0.2);\n}\n#T_440a4_row10_col0, #T_440a4_row27_col0 {\n  background-color: rgba(54, 170, 181, 0.2);\n}\n#T_440a4_row11_col0, #T_440a4_row28_col0 {\n  background-color: rgba(56, 168, 201, 0.2);\n}\n#T_440a4_row12_col0, #T_440a4_row29_col0 {\n  background-color: rgba(59, 163, 236, 0.2);\n}\n#T_440a4_row13_col0, #T_440a4_row30_col0 {\n  background-color: rgba(137, 148, 244, 0.2);\n}\n#T_440a4_row14_col0, #T_440a4_row31_col0 {\n  background-color: rgba(186, 130, 244, 0.2);\n}\n#T_440a4_row15_col0, #T_440a4_row32_col0 {\n  background-color: rgba(231, 102, 244, 0.2);\n}\n#T_440a4_row16_col0, #T_440a4_row33_col0 {\n  background-color: rgba(245, 99, 211, 0.2);\n}\n#T_440a4_level0_row0 {\n  background-color: rgba(179, 226, 205, 0.2);\n}\n#T_440a4_level1_row0, #T_440a4_level1_row17 {\n  background-color: rgba(246, 112, 136, 0.2);\n}\n#T_440a4_level1_row1, #T_440a4_level1_row18 {\n  background-color: rgba(247, 117, 67, 0.2);\n}\n#T_440a4_level1_row2, #T_440a4_level1_row19 {\n  background-color: rgba(213, 140, 49, 0.2);\n}\n#T_440a4_level1_row3, #T_440a4_level1_row20 {\n  background-color: rgba(187, 151, 49, 0.2);\n}\n#T_440a4_level1_row4, #T_440a4_level1_row21 {\n  background-color: rgba(163, 159, 49, 0.2);\n}\n#T_440a4_level1_row5, #T_440a4_level1_row22 {\n  background-color: rgba(135, 167, 49, 0.2);\n}\n#T_440a4_level1_row6, #T_440a4_level1_row23 {\n  background-color: rgba(79, 176, 49, 0.2);\n}\n#T_440a4_level1_row7, #T_440a4_level1_row24 {\n  background-color: rgba(50, 176, 114, 0.2);\n}\n#T_440a4_level1_row8, #T_440a4_level1_row25 {\n  background-color: rgba(52, 174, 144, 0.2);\n}\n#T_440a4_level1_row9, #T_440a4_level1_row26 {\n  background-color: rgba(53, 172, 164, 0.2);\n}\n#T_440a4_level1_row10, #T_440a4_level1_row27 {\n  background-color: rgba(54, 170, 181, 0.2);\n}\n#T_440a4_level1_row11, #T_440a4_level1_row28 {\n  background-color: rgba(56, 168, 201, 0.2);\n}\n#T_440a4_level1_row12, #T_440a4_level1_row29 {\n  background-color: rgba(59, 163, 236, 0.2);\n}\n#T_440a4_level1_row13, #T_440a4_level1_row30 {\n  background-color: rgba(137, 148, 244, 0.2);\n}\n#T_440a4_level1_row14, #T_440a4_level1_row31 {\n  background-color: rgba(186, 130, 244, 0.2);\n}\n#T_440a4_level1_row15, #T_440a4_level1_row32 {\n  background-color: rgba(231, 102, 244, 0.2);\n}\n#T_440a4_level1_row16, #T_440a4_level1_row33 {\n  background-color: rgba(245, 99, 211, 0.2);\n}\n#T_440a4_level0_row17 {\n  background-color: rgba(253, 205, 172, 0.2);\n}\n</style>\n<table id=\"T_440a4\">\n  <thead>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_440a4_level0_row0\" class=\"row_heading level0 row0\" rowspan=\"17\">Contigs</th>\n      <th id=\"T_440a4_level1_row0\" class=\"row_heading level1 row0\" >L10</th>\n      <td id=\"T_440a4_row0_col0\" class=\"data row0 col0\" >41</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row1\" class=\"row_heading level1 row1\" >L20</th>\n      <td id=\"T_440a4_row1_col0\" class=\"data row1 col0\" >99</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row2\" class=\"row_heading level1 row2\" >L30</th>\n      <td id=\"T_440a4_row2_col0\" class=\"data row2 col0\" >174</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row3\" class=\"row_heading level1 row3\" >L40</th>\n      <td id=\"T_440a4_row3_col0\" class=\"data row3 col0\" >267</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row4\" class=\"row_heading level1 row4\" >L50</th>\n      <td id=\"T_440a4_row4_col0\" class=\"data row4 col0\" >385</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row5\" class=\"row_heading level1 row5\" >N10</th>\n      <td id=\"T_440a4_row5_col0\" class=\"data row5 col0\" >12643769</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row6\" class=\"row_heading level1 row6\" >N20</th>\n      <td id=\"T_440a4_row6_col0\" class=\"data row6 col0\" >9681846</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row7\" class=\"row_heading level1 row7\" >N30</th>\n      <td id=\"T_440a4_row7_col0\" class=\"data row7 col0\" >7895799</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row8\" class=\"row_heading level1 row8\" >N40</th>\n      <td id=\"T_440a4_row8_col0\" class=\"data row8 col0\" >6288966</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row9\" class=\"row_heading level1 row9\" >N50</th>\n      <td id=\"T_440a4_row9_col0\" class=\"data row9 col0\" >4902968</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row10\" class=\"row_heading level1 row10\" >gc_content</th>\n      <td id=\"T_440a4_row10_col0\" class=\"data row10 col0\" >35.248103813419206</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row11\" class=\"row_heading level1 row11\" >longest</th>\n      <td id=\"T_440a4_row11_col0\" class=\"data row11 col0\" >43529772</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row12\" class=\"row_heading level1 row12\" >mean</th>\n      <td id=\"T_440a4_row12_col0\" class=\"data row12 col0\" >1552486.9914285715</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row13\" class=\"row_heading level1 row13\" >median</th>\n      <td id=\"T_440a4_row13_col0\" class=\"data row13 col0\" >331935.0</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row14\" class=\"row_heading level1 row14\" >sequence_count</th>\n      <td id=\"T_440a4_row14_col0\" class=\"data row14 col0\" >4200</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row15\" class=\"row_heading level1 row15\" >shortest</th>\n      <td id=\"T_440a4_row15_col0\" class=\"data row15 col0\" >1000</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row16\" class=\"row_heading level1 row16\" >total_bps</th>\n      <td id=\"T_440a4_row16_col0\" class=\"data row16 col0\" >6520445364</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level0_row17\" class=\"row_heading level0 row17\" rowspan=\"17\">Scaffolds</th>\n      <th id=\"T_440a4_level1_row17\" class=\"row_heading level1 row17\" >L10</th>\n      <td id=\"T_440a4_row17_col0\" class=\"data row17 col0\" >0</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row18\" class=\"row_heading level1 row18\" >L20</th>\n      <td id=\"T_440a4_row18_col0\" class=\"data row18 col0\" >0</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row19\" class=\"row_heading level1 row19\" >L30</th>\n      <td id=\"T_440a4_row19_col0\" class=\"data row19 col0\" >1</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row20\" class=\"row_heading level1 row20\" >L40</th>\n      <td id=\"T_440a4_row20_col0\" class=\"data row20 col0\" >2</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row21\" class=\"row_heading level1 row21\" >L50</th>\n      <td id=\"T_440a4_row21_col0\" class=\"data row21 col0\" >3</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row22\" class=\"row_heading level1 row22\" >N10</th>\n      <td id=\"T_440a4_row22_col0\" class=\"data row22 col0\" >1438277616</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row23\" class=\"row_heading level1 row23\" >N20</th>\n      <td id=\"T_440a4_row23_col0\" class=\"data row23 col0\" >1438277616</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row24\" class=\"row_heading level1 row24\" >N30</th>\n      <td id=\"T_440a4_row24_col0\" class=\"data row24 col0\" >915491830</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row25\" class=\"row_heading level1 row25\" >N40</th>\n      <td id=\"T_440a4_row25_col0\" class=\"data row25 col0\" >607508155</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row26\" class=\"row_heading level1 row26\" >N50</th>\n      <td id=\"T_440a4_row26_col0\" class=\"data row26 col0\" >518932092</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row27\" class=\"row_heading level1 row27\" >gc_content</th>\n      <td id=\"T_440a4_row27_col0\" class=\"data row27 col0\" >35.248103813419206</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row28\" class=\"row_heading level1 row28\" >longest</th>\n      <td id=\"T_440a4_row28_col0\" class=\"data row28 col0\" >1438277616</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row29\" class=\"row_heading level1 row29\" >mean</th>\n      <td id=\"T_440a4_row29_col0\" class=\"data row29 col0\" >3212576.533990148</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row30\" class=\"row_heading level1 row30\" >median</th>\n      <td id=\"T_440a4_row30_col0\" class=\"data row30 col0\" >62362.5</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row31\" class=\"row_heading level1 row31\" >sequence_count</th>\n      <td id=\"T_440a4_row31_col0\" class=\"data row31 col0\" >2030</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row32\" class=\"row_heading level1 row32\" >shortest</th>\n      <td id=\"T_440a4_row32_col0\" class=\"data row32 col0\" >1000</td>\n    </tr>\n    <tr>\n      <th id=\"T_440a4_level1_row33\" class=\"row_heading level1 row33\" >total_bps</th>\n      <td id=\"T_440a4_row33_col0\" class=\"data row33 col0\" >6521530364</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n:::\n:::\n\n\n:::\n:::\n\n### DNA Zoo's Table, Reproduced\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden  code-summary=\"To make the variable calls simpler in the table below.\"}\nlibrary(reticulate)\n```\n:::\n\n\n\nImporting the library makes the code a little bit cleaner for inserting the values into the table below. For example, I would have had to type 4\\,902\\,968, but now I can just type 4\\,902\\,968 into the individual cells. I needed to convert the values into r objects, as the knitr engine used in rendering this document does not seem display output from execution of inline Python code directly.\n\n|                          |                         |                       |                           |\n|------------------|------------------|------------------|-------------------|\n| **Contig length (bp)**   | **Number of contigs**   | **Contig N50 (bp)**   | **Longest contig (bp)**   |\n| 6\\,520\\,445\\,364        | 4\\,200     | 4\\,902\\,968     | 43\\,529\\,772         |\n| **Scaffold length (bp)** | **Number of scaffolds** | **Scaffold N50 (bp)** | **Longest scaffold (bp)** |\n| 6\\,521\\,530\\,364        | 2\\,030     | 518\\,932\\,092     | 1\\,438\\,277\\,616        |\n\n## :x NutFrame {.unnumbered .unlisted}\n\n\n\n::: {.cell}\n\n```{.python .cell-code .hidden  code-summary=\"The dataframe object on display, in all its glory.\"}\n# A simple call on the Styler object\nforma_df.data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                       Value\nCategory  Label                             \nContigs   L10                             41\n          L20                             99\n          L30                            174\n          L40                            267\n          L50                            385\n          N10                       12643769\n          N20                        9681846\n          N30                        7895799\n          N40                        6288966\n          N50                        4902968\n          gc_content      35.248103813419206\n          longest                   43529772\n          mean            1552486.9914285715\n          median                    331935.0\n          sequence_count                4200\n          shortest                      1000\n          total_bps               6520445364\nScaffolds L10                              0\n          L20                              0\n          L30                              1\n          L40                              2\n          L50                              3\n          N10                     1438277616\n          N20                     1438277616\n          N30                      915491830\n          N40                      607508155\n          N50                      518932092\n          gc_content      35.248103813419206\n          longest                 1438277616\n          mean             3212576.533990148\n          median                     62362.5\n          sequence_count                2030\n          shortest                      1000\n          total_bps               6521530364\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}